using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/* 
Чистый патерн MVC в игровой интерпретации, берём ссылки на компоненты, передаём мх
в контроллер, который обрабатывает их, возвращает данные и обновляем их во View

Controller - собственный скрипт, не наследуется от MonoBehaviour

Main - точка входа в приложение, где происходит инициализация, навешивается 
на Ground (на сцене) и в ручную добавляются ссылки на Player и Trigger 
 
View - хранилище ссылок и детекция
 */

namespace MVC
{
    public class Main : MonoBehaviour
    {
        // ссылки на игрока и на триггер
        [SerializeField] private View _player;
        [SerializeField] private View _trigger;

        // ссылка на экземпляр класса Controller (для создания объекта)
        private Controller _controller;

        void Awake()
        {
            // создаём объект класса Controller, происходит подписка на событие
            _controller = new Controller(_player, _trigger);
        }

        // для обновления какой-либо логики на игровой сцене через каждую секунду
        // можем прописать ссылку на свой метод апдейта в Controller
        void Update()
        {
            _controller.MyUpdate();
            // если нужно реже, то можно обернуть в условие с булевой переменной
        }
    }
}



/* Notes

MVC используется в основном для повышения производительности (особенно в 3D проектах), 
т.к. эта структура избавляется от лишних апдейтов в общем стеке компонентов. 
Достигается за счет низкого уровня связанности компонентов между собой в структуре. 

Поддерживает время и последовательность действий - являются ключевыми частями игровой
архитектуры, т.к. события должны происходить в правильной последовательности и в нужное
время. 

Цикл разработки всегда сжат, множеству разработчиков необходимо внедрять и менять широкий 
набор поведения, и не оставлять после себя следов по всей кодовой базе. Всё должно 
выполняться модульно.

Взаимодействия объектов на сцене реализуются без превращения кодовой базы в
спутанный клубок. Архитектура оправдана, если при смене команды разработчиков не возникает
проблем с продолжением/поддержкой проекта. 

MVC (MODEL - VIEW - CONTROLLER)

MODEL - текстовый файл, ассет, в который может что-либо записать. Scriptable Objects - 
специальный класс, который предназначен для организации данных и то, как мы работаем с 
данными, например, обсчет специальных условий, при выполнении которых выполняются 
действия.

VIEW (MonoBehaviour) - все объекты, расположенные на сцене. В этом скрипте располагаются
только ссылки на компоненты, которые навешены на объекты. Больше никакой логики, ни старта,
ни апдейта.

CONTROLLER - загрузчики, скрипты, которые контролируют как идёт игра (какой порядок 
действий, как и когда генерируются объекты и т.д.).

+ возможны дополнения

Application - само приложение, проигрыватель игры.

Component - скрипт, который выполняет только определённое фиксированное действие над
конкретным объектом и не влияет на другие объекты на сцене.  

 */

